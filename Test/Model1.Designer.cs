//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace Test
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class JournalDBEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект JournalDBEntities, используя строку соединения из раздела "JournalDBEntities" файла конфигурации приложения.
        /// </summary>
        public JournalDBEntities() : base("name=JournalDBEntities", "JournalDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта JournalDBEntities.
        /// </summary>
        public JournalDBEntities(string connectionString) : base(connectionString, "JournalDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта JournalDBEntities.
        /// </summary>
        public JournalDBEntities(EntityConnection connection) : base(connection, "JournalDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Data> Data
        {
            get
            {
                if ((_Data == null))
                {
                    _Data = base.CreateObjectSet<Data>("Data");
                }
                return _Data;
            }
        }
        private ObjectSet<Data> _Data;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Driver> Driver
        {
            get
            {
                if ((_Driver == null))
                {
                    _Driver = base.CreateObjectSet<Driver>("Driver");
                }
                return _Driver;
            }
        }
        private ObjectSet<Driver> _Driver;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Data. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToData(Data data)
        {
            base.AddObject("Data", data);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Driver. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDriver(Driver driver)
        {
            base.AddObject("Driver", driver);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="JournalDBModel", Name="Data")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Data : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Data.
        /// </summary>
        /// <param name="id">Исходное значение свойства id.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="applicationDateAndTime">Исходное значение свойства applicationDateAndTime.</param>
        /// <param name="dateAndTimeOfCarProvision">Исходное значение свойства dateAndTimeOfCarProvision.</param>
        /// <param name="purposesOfUsingAuto">Исходное значение свойства purposesOfUsingAuto.</param>
        /// <param name="route">Исходное значение свойства route.</param>
        /// <param name="nameDocument">Исходное значение свойства nameDocument.</param>
        /// <param name="lastName">Исходное значение свойства lastName.</param>
        /// <param name="cargo">Исходное значение свойства cargo.</param>
        /// <param name="applicationStatus">Исходное значение свойства applicationStatus.</param>
        public static Data CreateData(global::System.Int32 id, global::System.String name, global::System.String applicationDateAndTime, global::System.String dateAndTimeOfCarProvision, global::System.String purposesOfUsingAuto, global::System.String route, global::System.String nameDocument, global::System.String lastName, global::System.String cargo, global::System.String applicationStatus)
        {
            Data data = new Data();
            data.id = id;
            data.name = name;
            data.applicationDateAndTime = applicationDateAndTime;
            data.dateAndTimeOfCarProvision = dateAndTimeOfCarProvision;
            data.purposesOfUsingAuto = purposesOfUsingAuto;
            data.route = route;
            data.nameDocument = nameDocument;
            data.lastName = lastName;
            data.cargo = cargo;
            data.applicationStatus = applicationStatus;
            return data;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name != value)
                {
                    OnnameChanging(value);
                    ReportPropertyChanging("name");
                    _name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("name");
                    OnnameChanged();
                }
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String applicationDateAndTime
        {
            get
            {
                return _applicationDateAndTime;
            }
            set
            {
                if (_applicationDateAndTime != value)
                {
                    OnapplicationDateAndTimeChanging(value);
                    ReportPropertyChanging("applicationDateAndTime");
                    _applicationDateAndTime = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("applicationDateAndTime");
                    OnapplicationDateAndTimeChanged();
                }
            }
        }
        private global::System.String _applicationDateAndTime;
        partial void OnapplicationDateAndTimeChanging(global::System.String value);
        partial void OnapplicationDateAndTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String dateAndTimeOfCarProvision
        {
            get
            {
                return _dateAndTimeOfCarProvision;
            }
            set
            {
                if (_dateAndTimeOfCarProvision != value)
                {
                    OndateAndTimeOfCarProvisionChanging(value);
                    ReportPropertyChanging("dateAndTimeOfCarProvision");
                    _dateAndTimeOfCarProvision = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("dateAndTimeOfCarProvision");
                    OndateAndTimeOfCarProvisionChanged();
                }
            }
        }
        private global::System.String _dateAndTimeOfCarProvision;
        partial void OndateAndTimeOfCarProvisionChanging(global::System.String value);
        partial void OndateAndTimeOfCarProvisionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String purposesOfUsingAuto
        {
            get
            {
                return _purposesOfUsingAuto;
            }
            set
            {
                if (_purposesOfUsingAuto != value)
                {
                    OnpurposesOfUsingAutoChanging(value);
                    ReportPropertyChanging("purposesOfUsingAuto");
                    _purposesOfUsingAuto = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("purposesOfUsingAuto");
                    OnpurposesOfUsingAutoChanged();
                }
            }
        }
        private global::System.String _purposesOfUsingAuto;
        partial void OnpurposesOfUsingAutoChanging(global::System.String value);
        partial void OnpurposesOfUsingAutoChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String route
        {
            get
            {
                return _route;
            }
            set
            {
                if (_route != value)
                {
                    OnrouteChanging(value);
                    ReportPropertyChanging("route");
                    _route = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("route");
                    OnrouteChanged();
                }
            }
        }
        private global::System.String _route;
        partial void OnrouteChanging(global::System.String value);
        partial void OnrouteChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String nameDocument
        {
            get
            {
                return _nameDocument;
            }
            set
            {
                if (_nameDocument != value)
                {
                    OnnameDocumentChanging(value);
                    ReportPropertyChanging("nameDocument");
                    _nameDocument = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("nameDocument");
                    OnnameDocumentChanged();
                }
            }
        }
        private global::System.String _nameDocument;
        partial void OnnameDocumentChanging(global::System.String value);
        partial void OnnameDocumentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String lastName
        {
            get
            {
                return _lastName;
            }
            set
            {
                if (_lastName != value)
                {
                    OnlastNameChanging(value);
                    ReportPropertyChanging("lastName");
                    _lastName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("lastName");
                    OnlastNameChanged();
                }
            }
        }
        private global::System.String _lastName;
        partial void OnlastNameChanging(global::System.String value);
        partial void OnlastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String cargo
        {
            get
            {
                return _cargo;
            }
            set
            {
                if (_cargo != value)
                {
                    OncargoChanging(value);
                    ReportPropertyChanging("cargo");
                    _cargo = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("cargo");
                    OncargoChanged();
                }
            }
        }
        private global::System.String _cargo;
        partial void OncargoChanging(global::System.String value);
        partial void OncargoChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String applicationStatus
        {
            get
            {
                return _applicationStatus;
            }
            set
            {
                if (_applicationStatus != value)
                {
                    OnapplicationStatusChanging(value);
                    ReportPropertyChanging("applicationStatus");
                    _applicationStatus = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("applicationStatus");
                    OnapplicationStatusChanged();
                }
            }
        }
        private global::System.String _applicationStatus;
        partial void OnapplicationStatusChanging(global::System.String value);
        partial void OnapplicationStatusChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="JournalDBModel", Name="Driver")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Driver : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Driver.
        /// </summary>
        /// <param name="id_driver">Исходное значение свойства id_driver.</param>
        /// <param name="name">Исходное значение свойства name.</param>
        public static Driver CreateDriver(global::System.Int32 id_driver, global::System.String name)
        {
            Driver driver = new Driver();
            driver.id_driver = id_driver;
            driver.name = name;
            return driver;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id_driver
        {
            get
            {
                return _id_driver;
            }
            set
            {
                if (_id_driver != value)
                {
                    Onid_driverChanging(value);
                    ReportPropertyChanging("id_driver");
                    _id_driver = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id_driver");
                    Onid_driverChanged();
                }
            }
        }
        private global::System.Int32 _id_driver;
        partial void Onid_driverChanging(global::System.Int32 value);
        partial void Onid_driverChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name != value)
                {
                    OnnameChanging(value);
                    ReportPropertyChanging("name");
                    _name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("name");
                    OnnameChanged();
                }
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
    }

    #endregion

    
}
